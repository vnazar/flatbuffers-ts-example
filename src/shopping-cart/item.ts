// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class Item {
  bb: flatbuffers.flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.flatbuffers.ByteBuffer): Item {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsItem(bb: flatbuffers.flatbuffers.ByteBuffer, obj?: Item): Item {
    return (obj || new Item()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsItem(bb: flatbuffers.flatbuffers.ByteBuffer, obj?: Item): Item {
    bb.setPosition(bb.position() + flatbuffers.flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Item()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  id(): string | null
  id(optionalEncoding: flatbuffers.flatbuffers.Encoding): string | Uint8Array | null
  id(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null
  }

  name(): string | null
  name(optionalEncoding: flatbuffers.flatbuffers.Encoding): string | Uint8Array | null
  name(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null
  }

  price(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0
  }

  static startItem(builder: flatbuffers.flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addId(builder: flatbuffers.flatbuffers.Builder, idOffset: flatbuffers.flatbuffers.Offset) {
    builder.addFieldOffset(0, idOffset, 0)
  }

  static addName(builder: flatbuffers.flatbuffers.Builder, nameOffset: flatbuffers.flatbuffers.Offset) {
    builder.addFieldOffset(1, nameOffset, 0)
  }

  static addPrice(builder: flatbuffers.flatbuffers.Builder, price: number) {
    builder.addFieldFloat64(2, price, 0.0)
  }

  static endItem(builder: flatbuffers.flatbuffers.Builder): flatbuffers.flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createItem(
    builder: flatbuffers.flatbuffers.Builder,
    idOffset: flatbuffers.flatbuffers.Offset,
    nameOffset: flatbuffers.flatbuffers.Offset,
    price: number,
  ): flatbuffers.flatbuffers.Offset {
    Item.startItem(builder)
    Item.addId(builder, idOffset)
    Item.addName(builder, nameOffset)
    Item.addPrice(builder, price)
    return Item.endItem(builder)
  }
}
