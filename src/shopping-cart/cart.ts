// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { Item } from './item'

export class Cart {
  bb: flatbuffers.flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.flatbuffers.ByteBuffer): Cart {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsCart(bb: flatbuffers.flatbuffers.ByteBuffer, obj?: Cart): Cart {
    return (obj || new Cart()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsCart(bb: flatbuffers.flatbuffers.ByteBuffer, obj?: Cart): Cart {
    bb.setPosition(bb.position() + flatbuffers.flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Cart()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  items(index: number, obj?: Item): Item | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? (obj || new Item()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null
  }

  itemsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  total(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0
  }

  static startCart(builder: flatbuffers.flatbuffers.Builder) {
    builder.startObject(2)
  }

  static addItems(builder: flatbuffers.flatbuffers.Builder, itemsOffset: flatbuffers.flatbuffers.Offset) {
    builder.addFieldOffset(0, itemsOffset, 0)
  }

  static createItemsVector(
    builder: flatbuffers.flatbuffers.Builder,
    data: flatbuffers.flatbuffers.Offset[],
  ): flatbuffers.flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startItemsVector(builder: flatbuffers.flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static addTotal(builder: flatbuffers.flatbuffers.Builder, total: number) {
    builder.addFieldFloat64(1, total, 0.0)
  }

  static endCart(builder: flatbuffers.flatbuffers.Builder): flatbuffers.flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static finishCartBuffer(builder: flatbuffers.flatbuffers.Builder, offset: flatbuffers.flatbuffers.Offset) {
    builder.finish(offset)
  }

  static finishSizePrefixedCartBuffer(builder: flatbuffers.flatbuffers.Builder, offset: flatbuffers.flatbuffers.Offset) {
    builder.finish(offset, undefined, true)
  }

  static createCart(
    builder: flatbuffers.flatbuffers.Builder,
    itemsOffset: flatbuffers.flatbuffers.Offset,
    total: number,
  ): flatbuffers.flatbuffers.Offset {
    Cart.startCart(builder)
    Cart.addItems(builder, itemsOffset)
    Cart.addTotal(builder, total)
    return Cart.endCart(builder)
  }
}
